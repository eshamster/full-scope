name: Tests

on:
  push:

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Check code formatting
        run: npm run format:check
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run type checking
        run: npm run check
        
      - name: Run frontend tests
        run: npm run test
        
      - name: Run tests with coverage
        run: npm run test:coverage
        
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [test, fmt, clippy]
        include:
          - task: test
            name: "Backend Tests"
          - task: fmt
            name: "Code Formatting Check"
          - task: clippy
            name: "Clippy Lints"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # TODO: 動作確認完了後にコメントアウトを解除して条件付き実行を有効化
      # - name: Check for Rust changes
      #   id: rust-changes
      #   run: |
      #     if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
      #       # main ブランチへのpushは常に実行
      #       echo "run-task=true" >> $GITHUB_OUTPUT
      #     elif git diff --name-only HEAD~1 2>/dev/null | grep -E "(src-tauri/|\.rs$|Cargo\.)" | head -1; then
      #       echo "run-task=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "run-task=false" >> $GITHUB_OUTPUT
      #     fi
        
      - name: Cache system dependencies
        # if: steps.rust-changes.outputs.run-task == 'true'  # TODO: 動作確認後に有効化
        id: cache-system-deps  
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: apt-cache-${{ runner.os }}-${{ hashFiles('.github/workflows/test.yml') }}
          restore-keys: |
            apt-cache-${{ runner.os }}-
            
      - name: Install system dependencies
        # if: steps.rust-changes.outputs.run-task == 'true'  # TODO: 動作確認後に有効化
        run: |
          if [ "${{ steps.cache-system-deps.outputs.cache-hit }}" != "true" ]; then
            sudo apt-get update
          fi
          sudo apt-get install -y libglib2.0-dev libgtk-3-dev libwebkit2gtk-4.1-dev
        
      - name: Setup Rust
        # if: steps.rust-changes.outputs.run-task == 'true'  # TODO: 動作確認後に有効化
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache cargo dependencies
        # if: steps.rust-changes.outputs.run-task == 'true'  # TODO: 動作確認後に有効化
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('src-tauri/src/**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-
          
      - name: Run ${{ matrix.name }}
        # if: steps.rust-changes.outputs.run-task == 'true'  # TODO: 動作確認後に有効化
        working-directory: src-tauri
        run: |
          case ${{ matrix.task }} in
            test) cargo test ;;
            fmt) cargo fmt --check ;;
            clippy) cargo clippy -- -D warnings ;;
          esac

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build application
        run: npm run build